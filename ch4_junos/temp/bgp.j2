{% set node_igp = igp[inventory_hostname] %}
{% set node_intf = nodes_p2p_ip[inventory_hostname] %}
{% set node_bgp = bgp[inventory_hostname] %}
#################################
##### Start BGP Config ##########
#################################
routing-options {
    router-id {{node_igp.lo_ipv4|replace('/32','')}};
    autonomous-system {{bgp_asn}};
}
policy-options {
    policy-statement ADD_SITE_COMM {
        then {
            community add SITE_COMM;
        }
    }
    community SITE_COMM members {{node_bgp.site_comm}};
}
protocols {
    bgp {
        precision-timers;
        path-selection external-router-id;
        log-updown;
{%  if node_bgp.role == 'rr' %}
        group PG_IBGP_CORE_FULL_MESH {
            type internal;
            local-address {{node_igp.lo_ipv4|replace('/32','')}};
            export ADD_SITE_COMM;
            hold-time 90;
            bgp-error-tolerance;
            multipath;
            authentication-key {{bgp_password}};
            family inet {
                unicast;
            }
            family inet-vpn {
                unicast;
            }
            family inet6 {
                unicast;
            }
            family inet6-vpn {
                unicast;
            }
            family evpn {
                signaling;
            }
            tcp-mss 4096;
            neighbor {{node_bgp.rr1_ip}} {
                description "{{node_bgp.rr1}}";
            }
            neighbor {{node_bgp.rr2_ip}} {
                description "{{node_bgp.rr2}}";
            }
        }
        group PG_IBGP_CORE_RR_CLIENTS {
            type internal;
            local-address {{node_igp.lo_ipv4|replace('/32','')}};
            export ADD_SITE_COMM;
            hold-time 90;
            bgp-error-tolerance;
            passive;
            multipath;
            authentication-key {{bgp_password}};
            family inet {
                unicast;
            }
            family inet-vpn {
                unicast;
            }
            family inet6 {
                unicast;
            }
            family inet6-vpn {
                unicast;
            }
            family evpn {
                signaling;
            }
            cluster {{node_igp.lo_ipv4|replace('/32','')}};
            tcp-mss 4096;
{%      for client in bgp.keys() %}
{%          if inventory_hostname == bgp[client].rr1 and bgp[client].role != 'rr' %}
            neighbor {{igp[client].lo_ipv4|replace('/32','')}} {
                description "{{client}}";
            }
{%          elif inventory_hostname ==  bgp[client].rr2 and bgp[client].role != 'rr'  %}
            neighbor {{igp[client].lo_ipv4|replace('/32','')}} {
                description "{{client}}";
            }
{%          endif %}
{%      endfor %}
        }
{%  endif %}
{%  if node_bgp.role != 'rr' %}
        group PG_IBGP_CORE_RR {
            type internal;
            local-address {{node_igp.lo_ipv4|replace('/32','')}};
            export ADD_SITE_COMM;
            hold-time 90;
            bgp-error-tolerance;
            multipath;
            authentication-key {{bgp_password}};
            family inet {
                unicast;
            }
            family inet-vpn {
                unicast;
            }
            family inet6 {
                unicast;
            }
            family inet6-vpn {
                unicast;
            }
            family evpn {
                signaling;
            }
            tcp-mss 4096;
            neighbor {{node_bgp.rr1_ip}} {
                description "{{node_bgp.rr1}}";
            }
            neighbor {{node_bgp.rr2_ip}} {
                description "{{node_bgp.rr2}}";
            }
        }
{%  endif %}
    }
}
